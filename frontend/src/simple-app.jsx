import React, { useState } from 'react';
import axios from 'axios';

// Set API URL
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [activeTab, setActiveTab] = useState('login');
  const [userData, setUserData] = useState(null);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: ''
  });
  const [message, setMessage] = useState('');
  const [scriptContent, setScriptContent] = useState('');
  const [generatedScript, setGeneratedScript] = useState('');

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${API_URL}/auth/login`, {
        email: formData.email,
        password: formData.password
      });

      localStorage.setItem('token', response.data.token);
      setUserData(response.data.user);
      setIsLoggedIn(true);
      setMessage('Login successful!');
    } catch (error) {
      setMessage('Login failed: ' + (error.response?.data?.error || 'Server error'));
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${API_URL}/auth/register`, {
        email: formData.email,
        password: formData.password,
        name: formData.name
      });

      localStorage.setItem('token', response.data.token);
      setUserData(response.data.user);
      setIsLoggedIn(true);
      setMessage('Registration successful!');
    } catch (error) {
      setMessage('Registration failed: ' + (error.response?.data?.error || 'Server error'));
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
    setUserData(null);
    setFormData({ email: '', password: '', name: '' });
    setMessage('Logged out successfully');
  };

  const generateScript = () => {
    const mockScript = `
🎬 Generated Script for: "${scriptContent || 'Your Product'}"
━━━━━━━━━━━━━━━━━━━━━━━━━━━

Opening Hook:
"Are you tired of [problem]? What if I told you there's a solution that could change everything?"

Main Content:
Introducing ${scriptContent || 'your amazing product'}!
This revolutionary solution helps you:
✓ Save time and money
✓ Increase productivity by 200%
✓ Achieve your goals faster

Call to Action:
"Don't wait! Get started today and transform your life!"

━━━━━━━━━━━━━━━━━━━━━━━━━━━
Generated by Prompt-D-Voice AI
    `;
    setGeneratedScript(mockScript);
  };

  const styles = {
    container: {
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '20px',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    },
    card: {
      background: 'white',
      borderRadius: '20px',
      padding: '40px',
      maxWidth: '800px',
      margin: '0 auto',
      boxShadow: '0 20px 60px rgba(0,0,0,0.3)'
    },
    header: {
      textAlign: 'center',
      marginBottom: '40px'
    },
    title: {
      fontSize: '3em',
      color: '#333',
      marginBottom: '10px'
    },
    subtitle: {
      color: '#666',
      fontSize: '1.2em'
    },
    tabContainer: {
      display: 'flex',
      gap: '10px',
      marginBottom: '30px',
      justifyContent: 'center'
    },
    tab: {
      padding: '12px 30px',
      border: 'none',
      borderRadius: '10px',
      background: '#f0f0f0',
      cursor: 'pointer',
      fontSize: '16px',
      transition: 'all 0.3s'
    },
    activeTab: {
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white'
    },
    form: {
      display: 'flex',
      flexDirection: 'column',
      gap: '20px',
      marginBottom: '20px'
    },
    input: {
      padding: '15px',
      borderRadius: '10px',
      border: '2px solid #e0e0e0',
      fontSize: '16px',
      transition: 'border 0.3s'
    },
    textarea: {
      padding: '15px',
      borderRadius: '10px',
      border: '2px solid #e0e0e0',
      fontSize: '16px',
      minHeight: '150px',
      resize: 'vertical'
    },
    button: {
      padding: '15px 30px',
      borderRadius: '10px',
      border: 'none',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white',
      fontSize: '18px',
      fontWeight: 'bold',
      cursor: 'pointer',
      transition: 'transform 0.2s'
    },
    dangerButton: {
      background: 'linear-gradient(135deg, #f56565 0%, #c53030 100%)'
    },
    message: {
      padding: '15px',
      borderRadius: '10px',
      background: '#e8f4ff',
      color: '#0066cc',
      textAlign: 'center',
      marginBottom: '20px'
    },
    feature: {
      background: '#f8f9fa',
      padding: '20px',
      borderRadius: '10px',
      marginBottom: '20px'
    },
    scriptOutput: {
      background: '#1a1a1a',
      color: '#00ff00',
      padding: '20px',
      borderRadius: '10px',
      fontFamily: 'monospace',
      whiteSpace: 'pre-wrap',
      maxHeight: '400px',
      overflowY: 'auto'
    }
  };

  if (!isLoggedIn) {
    return (
      <div style={styles.container}>
        <div style={styles.card}>
          <div style={styles.header}>
            <h1 style={styles.title}>🎙️ Prompt-D-Voice</h1>
            <p style={styles.subtitle}>AI-Powered Script Generator & Text-to-Speech</p>
          </div>

          <div style={styles.tabContainer}>
            <button
              style={{...styles.tab, ...(activeTab === 'login' ? styles.activeTab : {})}}
              onClick={() => setActiveTab('login')}
            >
              Login
            </button>
            <button
              style={{...styles.tab, ...(activeTab === 'register' ? styles.activeTab : {})}}
              onClick={() => setActiveTab('register')}
            >
              Register
            </button>
            <button
              style={{...styles.tab, ...(activeTab === 'demo' ? styles.activeTab : {})}}
              onClick={() => setActiveTab('demo')}
            >
              Try Demo
            </button>
          </div>

          {message && <div style={styles.message}>{message}</div>}

          {activeTab === 'login' && (
            <form style={styles.form} onSubmit={handleLogin}>
              <input
                style={styles.input}
                type="email"
                name="email"
                placeholder="Email"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
              <input
                style={styles.input}
                type="password"
                name="password"
                placeholder="Password"
                value={formData.password}
                onChange={handleInputChange}
                required
              />
              <button style={styles.button} type="submit">Login</button>
            </form>
          )}

          {activeTab === 'register' && (
            <form style={styles.form} onSubmit={handleRegister}>
              <input
                style={styles.input}
                type="text"
                name="name"
                placeholder="Full Name"
                value={formData.name}
                onChange={handleInputChange}
                required
              />
              <input
                style={styles.input}
                type="email"
                name="email"
                placeholder="Email"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
              <input
                style={styles.input}
                type="password"
                name="password"
                placeholder="Password (min 6 characters)"
                value={formData.password}
                onChange={handleInputChange}
                required
                minLength="6"
              />
              <button style={styles.button} type="submit">Register</button>
            </form>
          )}

          {activeTab === 'demo' && (
            <div>
              <div style={styles.feature}>
                <h3>🚀 Try Script Generation (No Login Required)</h3>
                <textarea
                  style={styles.textarea}
                  placeholder="Enter your product/service description..."
                  value={scriptContent}
                  onChange={(e) => setScriptContent(e.target.value)}
                />
                <button
                  style={{...styles.button, marginTop: '10px'}}
                  onClick={generateScript}
                >
                  Generate Script
                </button>
              </div>

              {generatedScript && (
                <div style={styles.scriptOutput}>
                  {generatedScript}
                </div>
              )}
            </div>
          )}

          <div style={{marginTop: '40px', textAlign: 'center', color: '#666'}}>
            <p>📌 Test Credentials: email@test.com / password123</p>
            <p>🔗 Backend: {API_URL}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      <div style={styles.card}>
        <div style={styles.header}>
          <h1 style={styles.title}>Welcome, {userData?.name}! 👋</h1>
          <p style={styles.subtitle}>What would you like to create today?</p>
        </div>

        <div style={styles.feature}>
          <h2>📝 Script Generator</h2>
          <textarea
            style={styles.textarea}
            placeholder="Describe your product or service..."
            value={scriptContent}
            onChange={(e) => setScriptContent(e.target.value)}
          />
          <button
            style={{...styles.button, marginTop: '10px'}}
            onClick={generateScript}
          >
            Generate AI Script
          </button>
        </div>

        {generatedScript && (
          <div style={styles.scriptOutput}>
            {generatedScript}
          </div>
        )}

        <div style={styles.feature}>
          <h2>🔊 Text to Speech</h2>
          <p>Convert your scripts to natural-sounding voice (Coming Soon)</p>
        </div>

        <div style={{textAlign: 'center', marginTop: '40px'}}>
          <button
            style={{...styles.button, ...styles.dangerButton}}
            onClick={handleLogout}
          >
            Logout
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;